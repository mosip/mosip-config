##################### Dynamic Properties ########################################
# For PMS Database 
mosip.pmp.database.hostname=postgres
mosip.pmp.database.port=80
mosip.pmp.database.user=pmsuser
mosip.pmp.database.password={cipher}6cbd7358f7a821132862475c16cf48e575c8e2c5f994fa7140ee08f364015b24

#### For Authenticate Device ########
mosip.authdevice.database.hostname=postgres
mosip.authdevice.database.port=80
mosip.authdevice.database.user=authdeviceuser
mosip.authdevice.database.password={cipher}6cbd7358f7a821132862475c16cf48e575c8e2c5f994fa7140ee08f364015b24

######### For Registration Device ###########
mosip.regdevice.database.hostname=postgres
mosip.regdevice.database.port=80
mosip.regdevice.database.user=regdeviceuser
mosip.regdevice.database.password={cipher}6cbd7358f7a821132862475c16cf48e575c8e2c5f994fa7140ee08f364015b24


######################## Spring and Hibernate Configurations ####################
# ***************** PMS DB Postgres Properties ***********************
javax.persistence.jdbc.driverClassName=org.postgresql.Driver
javax.persistence.jdbc.driver=org.postgresql.Driver
javax.persistence.jdbc.url=jdbc:postgresql://${mosip.pmp.database.hostname}:${mosip.pmp.database.port}/mosip_pms
javax.persistence.jdbc.user=${mosip.pmp.database.user}
javax.persistence.jdbc.username=${mosip.pmp.database.user}
javax.persistence.jdbc.password=${mosip.pmp.database.password}
javax.persistence.jdbc.schema = pms
javax.persistence.jdbc.uinHashTable=uin_hash_salt
javax.persistence.jdbc.uinEncryptTable=uin_encrypt_salt

## For Authenticate Device
mosip.datasource.authdevice.jdbc.driver=org.postgresql.Driver
mosip.datasource.authdevice.jdbc.url = jdbc:postgresql://${mosip.authdevice.database.hostname}:${mosip.authdevice.database.port}/mosip_authdevice
mosip.datasource.authdevice.jdbc.password = ${mosip.authdevice.database.password}
mosip.datasource.authdevice.jdbc.user = ${mosip.authdevice.database.user}
mosip.datasource.authdevice.jdbc.schema = authdevice
mosip.datasource.authdevice.hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect

## For Registration Device
mosip.datasource.regdevice.jdbc.driver=org.postgresql.Driver
mosip.datasource.regdevice.jdbc.url = jdbc:postgresql://${mosip.regdevice.database.hostname}:${mosip.regdevice.database.port}/mosip_regdevice
mosip.datasource.regdevice.jdbc.password = ${mosip.regdevice.database.password}
mosip.datasource.regdevice.jdbc.user = ${mosip.regdevice.database.user}
mosip.datasource.regdevice.jdbc.schema = regdevice
mosip.datasource.regdevice.hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect

# *********** Hibernate Properties *************
hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect
hibernate.jdbc.lob.non_contextual_creation=true
hibernate.hbm2ddl.auto=none
hibernate.show_sql=true
hibernate.format_sql=true
hibernate.connection.charSet=utf8
hibernate.cache.use_second_level_cache=false
hibernate.cache.use_query_cache=false
hibernate.cache.use_structured_entries=false
hibernate.generate_statistics=false
spring.datasource.initialization-mode=never

######################### Partner Management Application Configurations ##############
# Application ID of PMP
# Used to upload other domain certs
application.id=PARTNER

# Application name of PMP
application.name=partner

# To configure starting value or initial value of mispId.
# ex: if value = 3 ==> mispId starts from  100
# if value = 4 ==> mispId starts from 1000
mosip.kernel.mispid.length = 3

# To configure length of misp license key 
mosip.kernel.idgenerator.misp.license-key-length = 50

# To configure the partner types for which extractors are required. It should be "," separated.
pmp.bioextractors.required.partner.types = Credential_Partner,Online_Verification_Partner

# To configure misp license validity duration
mosip.pmp.misp.license.expiry.period.indays = 90

# To configure partner api key validity duration
mosip.pmp.partner.policy.expiry.period.indays = 90

# To configure policy validity duration/period
pmp.policy.expiry.period.indays = 180

# policy schema url where policy schemas published
pmp.policy.schema.url= https://schemas.mosip.io/v1/auth-policy

# To configure what are the allowed policy types.
# If we add any new policy type, corresponding schema also needs to be added.
# format for adding schema configuration for new policy type is as below
# pmp.policyTypeName.policy.schema(all are in lowercase)= schema url
pmp.allowed.policy.types=Auth,DataShare,CredentialIssuance,MISP

# auth policy schema url
pmp.auth.policy.schema = ${mosip.kernel.xsdstorage-uri}auth-policy-schema.json

# datashare policy schema url
pmp.datashare.policy.schema=${mosip.kernel.xsdstorage-uri}data-share-policy-schema.json

# credentialissuance policy schema url
pmp.credentialissuance.policy.schema=${mosip.kernel.xsdstorage-uri}data-share-policy-schema.json

# To configure email format of misp
pmp.misp.valid.email.address.regex=^[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$

# To configure email format of partner
pmp.partner.valid.email.address.regex=^[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$

# To configure length of partnerId
pmp.partner.partnerId.max.length=36

# Time difference between request creation and request processing
masterdata.registerdevice.timestamp.validate=+5

# Kernel audit Service
mosip.kernel.masterdata.audit-url=http://kernel-auditmanager-service/v1/auditmanager/audits
pmp.partner.certificaticate.upload.rest.uri=${mosip.kernel.keymanager.url}/v1/keymanager/v2/uploadPartnerCertificat

mosip.pms.ca.signed.partner.certificate.available=false
mosip.pms.oidc.client.available=false
mosip.pms.root.and.intermediate.certificates.available=false

# Kernel sign service
mosip.kernel.sign-url=http://kernel-keymanager-service/v1/keymanager/jwtSign

# ApplicationId for partner
mosip.pmp.auth.appId =partner

# Kernel auth client ID for partner management services
mosip.pmp.auth.clientId=mosip-partner-client

# Kernel auth secret key for partner management services
mosip.pmp.auth.secretKey= {cipher}4e22fb7201d82324263ff4fb91035e9d0462dffd76184184d554db962cab0840

# Key manager service API's to upload certificates
pms.cert.service.token.request.clientId=${mosip.pmp.auth.clientId}
pms.cert.service.token.request.issuerUrl=http://kernel-auth-service/v1/authmanager/authenticate/clientidsecretkey
pmp.ca.certificaticate.upload.rest.uri=http://kernel-keymanager-service/v1/keymanager/uploadCACertificate
pmp.partner.certificaticate.upload.rest.uri=http://kernel-keymanager-service/v1/keymanager/uploadPartnerCertificate
pmp.partner.certificaticate.get.rest.uri=http://kernel-keymanager-service/v1/keymanager/getPartnerCertificate/{partnerCertId}
pmp-keymanager.upload.other.domain.cert.rest.uri=http://kernel-keymanager-service/v1/keymanager/uploadOtherDomainCertificate

###################KeyCloak configuration ###################################
# These configurations are used to create user in keycloak and map to a role.
# Pre-Condition: All partner types should be created as roles in keycloak.
mosip.iam.base-url=http://keycloak
mosip.iam.realm.operations.base-url = ${mosip.iam.base-url}/auth/admin/realms/{realmId}
mosip.iam.admin-url =${mosip.iam.base-url}/auth/admin/
mosip.iam.admin-realm-id =admin
mosip.iam.roles-extn-url =realms/mosip/roles
mosip.iam.users-extn-url = realms/mosip/users
mosip.iam.role-user-mapping-url =/{userId}/role-mappings/realm
mosip.iam.open-id-url =${mosip.iam.base-url}/auth/realms/{realmId}/protocol/openid-connect/
mosip.iam.master.realm-id=master
mosip.iam.default.realm-id=mosip
mosip.keycloak.admin.client.id=admin-cli
mosip.keycloak.admin.user.id=admin
mosip.keycloak.admin.secret.key={cipher}e16f132dc80ad5043acb6c2173c95be217ee5f5246a589ca58d5f75fa0a9d63d

#------------------------Auth-Adapter-----------------------------------------------
auth.server.validate.url=http://kernel-auth-service/v1/authmanager/authorize/admin/validateToken
auth.server.admin.validate.url=http://kernel-auth-service/v1/authmanager/authorize/admin/validateToken
auth.jwt.secret=authjwtsecret
auth.jwt.base=Mosip-Token

##############Security properties ########################
#CSRF switch
mosip.security.csrf-enable:false
#secure cookie switch
mosip.security.secure-cookie:false

#Max rows to be returned after filter
partner.search.maximum.rows=10

#Allowed credential types which partner can map against to policy
pmp.allowed.credential.types=auth,qrcode,euin,reprint

#Allowed partner types who can map policies to credential types
policy.credential.type.mapping.allowed.partner.types=Credential_Partner,Online_Verification_Partner

#Allowed kyc attributes
#Used to display in UI
policy.allowed.kyc.attributes = {"fullName": "Full Name","middleName": "Middle Name","lastName": "Last Name","dateOfBirth": "DateOfBirth","gender": "Gender","phone": "phone"}
#Used to display in UI
policy.auth.allowed.token.types=random,partner,policy

# IAM
# mosipbox.public.url is Ansible defined
mosip.iam.module.login_flow.name=authorization_code
mosip.iam.module.clientID=mosip-pms-client
mosip.iam.module.clientsecret={cipher}4e22fb7201d82324263ff4fb91035e9d0462dffd76184184d554db962cab0840
mosip.iam.module.redirecturi=${mosipbox.public.url}/v1/partnermanager/login-redirect/
mosip.iam.module.login_flow.scope=cls
mosip.iam.module.login_flow.response_type=code
mosip.iam.authorization_endpoint=${mosipbox.public.url}/keycloak/auth/realms/mosip/protocol/openid-connect/auth
mosip.iam.module.admin_realm_id=mosip
mosip.kernel.filtervalue.max_columns =100
mosip.iam.token_endpoint=${mosipbox.public.url}/keycloak/auth/realms/mosip/protocol/openid-connect/token

###############Not used properties###################
pmp.policy.allowed.authtokens.types=random,partner,policy
mosip.kernel.device.search-url=http://kernel-masterdata-service/v1/masterdata/devices/search
token.request.appid=admin
token.request.password=mosip
token.request.username=110005
token.request.version=string
token.request.id=v1
token.request.issuerUrl=http://kernel-auth-service/v1/authmanager/authenticate/clientidsecretkey
token.request.clientId=admin
PASSWORDBASEDTOKENAPI=http://kernel-auth-service/v1/authmanager/authenticate/useridPwd
application.env.local=false
