management.endpoint.restart.enabled=true

#----------------------------------ID Repo dynamic properties----------------------------------------------#

# IDRepo database url
mosip.idrepo.db.url=postgres

# IDRepo database port
mosip.idrepo.db.port=80

#IDRepo identity service database name
mosip.idrepo.db.identity.db-name=mosip_idrepo

#IDRepo identity service database username
mosip.idrepo.db.identity.username=idrepouser

#IDRepo database password (encrypted)
mosip.idrepo.db.identity.password={cipher}6cbd7358f7a821132862475c16cf48e575c8e2c5f994fa7140ee08f364015b24

#IDRepo VID service database name
mosip.idrepo.db.vid.db-name=mosip_idmap

#IDRepo VID service database username
mosip.idrepo.db.vid.username=idmapuser

#IDRepo VID service database password (encrypted)
mosip.idrepo.db.vid.password={cipher}6cbd7358f7a821132862475c16cf48e575c8e2c5f994fa7140ee08f364015b24

#IDRepo ObjectStore account name
mosip.idrepo.objectstore.account-name=idrepo

#IDRepo ObjectStore bucket name under which all idrepo objects are stored
mosip.idrepo.objectstore.bucket-name=idrepo

#IDRepo ObjectStore adapter name
mosip.idrepo.objectstore.adapter-name=s3Adapter

#----------------------------------ID Repo Service---------------------------------------------------------#

# Application name using for auditing
mosip.idrepo.application.name=ID-Repository

# Application version validation in ID-Repo requests
mosip.idrepo.application.version.pattern=^v\\d+(\\.\\d+)?$

# Modulo value used to evaluate expression (UIN % modulo) used to get the salt from salt table 
mosip.idrepo.modulo-value=1000

# Configuration for +/- time period adjustment in minutes for the request time validation, so that 
#the requests originating from a system that is not in time-sync will be accepted for the time period
mosip.idrepo.datetime.future-time-adjustment=2

#---------------------------Kernel Retry Configurations----------------------------------------------------#
# The retry limit excluding the first attempt before attempting for retries. Default is set to 5.
kernel.retry.attempts.limit=5
# The initial interval to be used for exponential backoff in milli seconds. If the exponential backoff is disabled by setting 'kernel.retry.exponential.backoff.multiplier' value as 1, this initial interval will be used as the fixed backoff interval for every retries. Default value is 200 millisecs
kernel.retry.exponential.backoff.initial.interval.millisecs=100
# The multiplier for exponential backoff intreval. A double value greater than or equal to 1. Setting to 1 will make it to fixed backoff, more than 1 will apply exponential backoff. Default is 1.0 (fixed backoff). For exponential backoff the suggested value is 1.5 or 2. The next backoff interval is calculated with the formula: NextBackOffInterval = initialInterval * Math.pow(multiplier, retryCount)
kernel.retry.exponential.backoff.multiplier=1.5
kernel.retry.exponential.backoff.max.interval.millisecs=1000
# Whether to traverse to the root cause exception from the exception thrown and use the same root cause to decide whether to retry or not. Default is true.
kernel.retry.traverse.root.cause.enabled=false
#Comma separated List of fully qualified Exceptions which are retryable (inclusion list). Their subclasses will also be considered in the evaluation.
kernel.retry.retryable.exceptions=io.mosip.idrepository.core.exception.IdRepoRetryException
#Comma separated List of fully qualified Exceptions which are not-retryable (exclusion list). Their subclasses will also be considered in the evaluation.
kernel.retry.nonretryable.exceptions=

#----------------------------------ID Repo Identity Service------------------------------------------------#

# Application version expected in the request
mosip.idrepo.identity.application.version=v1

# Application ids expected in the requests
mosip.idrepo.identity.id.create=mosip.id.create
mosip.idrepo.identity.id.read=mosip.id.read
mosip.idrepo.identity.id.update=mosip.id.update

#database mappings for identity service
mosip.idrepo.identity.db.url=jdbc:postgresql://${mosip.idrepo.db.url}:${mosip.idrepo.db.port}/${mosip.idrepo.db.identity.db-name}
mosip.idrepo.identity.db.username=${mosip.idrepo.db.identity.username}
mosip.idrepo.identity.db.password=${mosip.idrepo.db.identity.password}
mosip.idrepo.identity.db.driverClassName=org.postgresql.Driver

# Path of UIN expected in the input idrepo request. This path is based on Identity schema.
mosip.idrepo.identity.json.path=identity.UIN

# UIN status value which is stored in database for newly inserted UIN/active UINs.
mosip.idrepo.identity.uin-status.registered=ACTIVATED

# List of allowed UIN status in ID-Repo 
mosip.idrepo.identity.uin-status=ACTIVATED,BLOCKED,DEACTIVATED 

# Types allowed in retreiveIdentity requests
mosip.idrepo.identity.allowedTypes=bio,demo,all

# Reference IDs of base keys used for encryption/decryption
mosip.idrepo.crypto.refId.uin=
mosip.idrepo.crypto.refId.uin-data=
mosip.idrepo.crypto.refId.demo-doc-data=
mosip.idrepo.crypto.refId.bio-doc-data=

#-----------------------ID Repo Identity Service - idobjectvalidator---------------------------------------#

# Class name of the referenceValidator. Commenting or removing this property will disable reference validator.
#mosip.kernel.idobjectvalidator.referenceValidator=io.mosip.kernel.idobjectvalidator.impl.IdObjectReferenceValidator

#----------------------------------ID Repo VID Service-----------------------------------------------------#
# Application version expected in the request
mosip.idrepo.vid.application.version=v1

# Application ids expected in the requests
mosip.idrepo.vid.id.create=mosip.vid.create
mosip.idrepo.vid.id.read=mosip.vid.read
mosip.idrepo.vid.id.update=mosip.vid.update
mosip.idrepo.vid.id.regenerate=mosip.vid.regenerate 
mosip.idrepo.vid.id.reactivate=mosip.vid.reactivate
mosip.idrepo.vid.id.deactivate=mosip.vid.deactivate

# Database mapping for VID service
mosip.idrepo.vid.db.url=jdbc:postgresql://${mosip.idrepo.db.url}:${mosip.idrepo.db.port}/${mosip.idrepo.db.vid.db-name}
mosip.idrepo.vid.db.username=${mosip.idrepo.db.vid.username}
mosip.idrepo.vid.db.password=${mosip.idrepo.db.vid.password}
mosip.idrepo.vid.db.driverClassName=org.postgresql.Driver

# VID status value which is stored in database for newly inserted VID/active VIDs.
mosip.idrepo.vid.active-status=ACTIVE

# VID status for which unlimited txn is not allowed
mosip.idrepo.vid.unlimited-txn-status=USED

# VID status which are allowed for VID regeneration
mosip.idrepo.vid.regenerate.allowed-status=ACTIVE,REVOKED,EXPIRED,USED

# List of allowed VID status in ID-Repo 
mosip.idrepo.vid.allowedstatus=ACTIVE,REVOKED,EXPIRED,USED,INVALIDATED,DEACTIVATED

# VID status value which is stored in database for deactivated VIDs. Used in deactivate-all-vids api.
mosip.idrepo.vid.deactive-status=DEACTIVATED

# VID status value which is stored in database for reactivated VIDs. Used in reactivate-all-vids api.
mosip.idrepo.vid.reactive-status=ACTIVE

# Config server url
mosip.idrepo.mosip-config-url=${spring.cloud.config.uri}/${spring.application.name}/${spring.profiles.active}/${spring.cloud.config.label}/

# VID policy schema against which VID policy is validated
mosip.idrepo.vid.policy-schema-url=${mosip.idrepo.mosip-config-url}mosip-vid-policy-schema.json

# VID policy based on which VID is created
mosip.idrepo.vid.policy-file-url=${mosip.idrepo.mosip-config-url}mosip-vid-policy.json

#----------------------------------REST-services ----------------------------------------------------------#
mosip.idrepo.audit.rest.uri=http://kernel-auditmanager-service/v1/auditmanager/audits
mosip.idrepo.audit.rest.httpMethod=POST
mosip.idrepo.audit.rest.headers.mediaType=application/json

mosip.idrepo.encryptor.rest.uri=http://kernel-keymanager-service/v1/keymanager/encrypt
mosip.idrepo.encryptor.rest.httpMethod=POST
mosip.idrepo.encryptor.rest.headers.mediaType=application/json
mosip.idrepo.encryptor.rest.timeout=100

mosip.idrepo.decryptor.rest.uri=http://kernel-keymanager-service/v1/keymanager/decrypt
mosip.idrepo.decryptor.rest.httpMethod=POST
mosip.idrepo.decryptor.rest.headers.mediaType=application/json
mosip.idrepo.decryptor.rest.timeout=100

mosip.idrepo.vid-service.rest.uri=http://idrepo-vid-service/idrepository/v1/vid/uin/{uin}
mosip.idrepo.vid-service.rest.httpMethod=GET
mosip.idrepo.vid-service.rest.headers.mediaType=application/json
mosip.idrepo.vid-service.rest.timeout=100

mosip.idrepo.retrieve-uin-by-vid.rest.uri=http://idrepo-vid-service/idrepository/v1/vid/{vid}
mosip.idrepo.retrieve-uin-by-vid.rest.httpMethod=GET
mosip.idrepo.retrieve-uin-by-vid.rest.headers.mediaType=application/json
mosip.idrepo.retrieve-uin-by-vid.rest.timeout=100

mosip.idrepo.bio-extractor-service.rest.uri=http://idrepo-bioextractor-service/v1/bioextractor/{extractionFormat}/extracttemplates
mosip.idrepo.bio-extractor-service.rest.httpMethod=POST
mosip.idrepo.bio-extractor-service.rest.headers.mediaType=application/json
mosip.idrepo.bio-extractor-service.rest.timeout=100

mosip.idrepo.syncdata-service.rest.uri=http://kernel-masterdata-service/v1/masterdata/idschema/latest
mosip.idrepo.syncdata-service.rest.httpMethod=GET
mosip.idrepo.syncdata-service.rest.headers.mediaType=application/json
mosip.idrepo.syncdata-service.rest.timeout=100

mosip.idrepo.pmp.partner.rest.uri=http://pms-partner-manager-service/v1/partnermanager/partners?partnerType=Online_Verification_Partner
mosip.idrepo.pmp.partner.rest.httpMethod=GET
mosip.idrepo.pmp.partner.rest.headers.mediaType=application/json
mosip.idrepo.pmp.partner.rest.timeout=10

mosip.idrepo.credential.request.rest.uri=http://idrepo-credential-request-generator/v1/credentialrequest/requestgenerator
mosip.idrepo.credential.request.rest.httpMethod=POST
mosip.idrepo.credential.request.rest.headers.mediaType=application/json
mosip.idrepo.credential.request.rest.timeout=10

mosip.idrepo.retrieve-by-uin.rest.uri=http://idrepo-identity-service/idrepository/v1/identity/idvid/{uin}
mosip.idrepo.retrieve-by-uin.rest.httpMethod=GET
mosip.idrepo.retrieve-by-uin.rest.headers.mediaType=application/json
mosip.idrepo.retrieve-by-uin.rest.timeout=100

mosip.idrepo.vid-generator.rest.uri=http://kernel-idgenerator-service/v1/idgenerator/vid
mosip.idrepo.vid-generator.rest.httpMethod=GET
mosip.idrepo.vid-generator.rest.headers.mediaType=application/json
mosip.idrepo.vid-generator.rest.timeout=100

#--------------------------Credential-Request-Generator properties-----------------------------------#

#database mappings Credential-Request-Generator
mosip.credential.service.database.hostname=postgres
mosip.credential.service.database.port=80
mosip.credential.service.jdbc.url=jdbc:postgresql://${mosip.credential.service.database.hostname}:${mosip.credential.service.database.port}/mosip_credential?currentSchema=credential
mosip.credential.service.jdbc.user=credentialuser
mosip.credential.service.jdbc.password={cipher}6cbd7358f7a821132862475c16cf48e575c8e2c5f994fa7140ee08f364015b24
mosip.credential.service.jdbc.driver=org.postgresql.Driver
hibernate.hbm2ddl.auto=update
hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
hibernate.jdbc.lob.non_contextual_creation=true
hibernate.show_sql=false

#Token generator properties Credential request generator
credential.request.token.request.appid=crereq
credential.request.token.request.clientId=mosip-crereq-client
credential.request.token.request.secretKey={cipher}b5fb76d3a57ce10fc27aee1685ce906836970d52c4cf13a01282bfe99565bedf
credential.request.token.request.version=1.0
credential.request.token.request.id=io.mosip.credentialrequestgenerator
credential.request.token.request.issuerUrl=${mosipbox.public.url}/keycloak/auth/realms/mosip
mosip.credential.request.service.id=mosip.credential.request.generator
mosip.credential.request.datetime.pattern=yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
mosip.credential.request.service.version=1.0

#---------------Batch job properties----------------------------------#
#batch job time intervel in miliseconds
mosip.credential.request.job.timedelay=10000
mosip.credential.request.job.timeintervel=15000
#Reprocessing job timeintervel in miliseconds
mosip.credential.request.reprocess.job.timedelay=10000
# This property can be set to auth,print or keep it empty so batch will pick up all records#
credential.request.type=auth
credential.request.retry.max.count=10
#credential.request.reprocess.statuscodes=FAILED,RETRY
credential.request.reprocess.statuscodes=RETRY
credential.batch.core.pool.size=10
credential.batch.max.pool.size=10
credential.batch.queue.capacity=10
credential.batch.page.size=60
credential.batch.chunk.size=8
credential.batch.thread.count=30
credential.request.process.locktimeout=60000
credential.request.reprocess.locktimeout=60000

#----------------------------------REST-services ----------------------------------------------------------#
CRDENTIALSERVICE=http://idrepo-credential-service/v1/credentialservice/issue
KEYBASEDTOKENAPI=http://kernel-auth-service/v1/authmanager/authenticate/clientidsecretkey
CALLBACKURL=${mosipbox.public.url}/v1/credentialrequest/callback/notifyStatus
#-----Websub configurations------
#Delay (in milliseconds) for subscription on application startup to avoid failure during intent verification by hub.
subscription-delay-secs=120000
# The time interval in seconds to schedule subscription of topics which is done as a
# work-around , By default the
# this property value is set to 0 that disables this workaround.
# To enable the resubscrition scheduling, this property should be assigned with a positive
# number like 1 * 60 * 60 = 3600 for one hour
resubscription-delay-secs=42200
WEBSUBSECRET=test

#--------------------------Credential-Request-Generator properties ends-----------------------------------#

#--------------------------Credential-Service properties--------------------------------------------------#

#Token generator properties Credential Service
credential.service.token.request.appid=creser
credential.service.token.request.clientId=mosip-creser-client
credential.service.token.request.secretKey={cipher}b5fb76d3a57ce10fc27aee1685ce906836970d52c4cf13a01282bfe99565bedf
credential.service.token.request.id=io.mosip.credentialstore

#Credential formatter properties Credential Service
mosip.credential.vc.datetime.pattern=yyyy-MM-dd'T'HH:mm:ss'Z'
mosip.credential.service.datetime.pattern=yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
mosip.credential.service.service.id=mosip.credential.store
mosip.credential.service.service.version=1.0
credential.service.credentialtype.file=CredentialType.json
credential.service.mvel.file=credentialdata.mvel
credential.service.dob.format=yyyy/MM/dd
mosip.credential.service.credential.schema=MOSIPVerifiableCredential
mosip.credential.service.type.name=mosip
mosip.credential.service.type.namespace=mosip
credentialType.formatter.AUTH=IdAuthProvider
credentialType.formatter.QRCODE=QrCodeProvider
credentialType.formatter.MOSIP=CredentialProvider
credentialType.formatter.EUIN=QrCodeProvider
credentialType.formatter.REPRINT=QrCodeProvider
mosip.credential.service.format.id=http://mosip.io/credentials/
mosip.credential.service.format.issuer=https://mosip.io/issuers/
mosip.credential.service.application.id=PARTNER
mosip.credential.service.includeCertificateHash=true
mosip.credential.service.includeCertificate=true
mosip.credential.service.includePayload=false
mosip.credential.service.share.prependThumbprint=false
mosip.credential.service.retry.maxAttempts=3
mosip.credential.service.retry.maxDelay=100
#----------------------------------REST-services ----------------------------------------------------------#
IDREPOGETIDBYID=http://idrepo-identity-service/idrepository/v1/identity/idvid
mosip.data.share.protocol=http
CREATEDATASHARE=/v1/datashare/create
KEYBASEDTOKENAPI=http://kernel-auth-service/v1/authmanager/authenticate/clientidsecretkey
KEYMANAGER_JWTSIGN=http://kernel-keymanager-service/v1/keymanager/jwtSign
KEYMANAGER_ENCRYPT_PIN=http://kernel-keymanager-service/v1/keymanager/encryptWithPin
KEYMANAGER_ENCRYPT_ZK=http://kernel-keymanager-service/v1/keymanager/zkEncrypt
PARTNER_POLICY=http://pms-partner-manager-service/v1/partnermanager/partners/{partnerId}/credentialtype/{credentialType}/policies
PARTNER_EXTRACTION_POLICY=http://pms-partner-manager-service/v1/partnermanager/partners/{partnerId}/bioextractors/{policyId}
credential.service.token.request.issuerUrl=${mosipbox.public.url}/keycloak/auth/realms/mosip
GENERATE_VID=http://idrepo-vid-service/idrepository/v1/vid
RETRIEVE_VID=http://idrepo-vid-service/idrepository/v1/vid/uin
logging.level.io.mosip=DEBUG

#--------------------------Credential-Service properties ends--------------------------------------------------#

#--------------------------Bio SDK Integration - Bio extractor Service ----------------------------------------#
#mosip.biosdk.default.host= http://mock-biosdk-service
#mosip.biosdk.default.service.url=${mosip.biosdk.default.host}/biosdk-service
#mosip.biosdk.default.host=http://15.206.186.165

#below is IP address for tech5 v4.5.2 sdk from engg. team 
#mosip.biosdk.default.host=http://13.201.83.133
#tech5 SDk v6.3.4 
mosip.biosdk.default.host=http://13.235.23.85
mosip.biosdk.default.service.url=${mosip.biosdk.default.host}/api
#NeuroTech bioSDK url
#mosip.biosdk.default.service.url=http://52.66.204.226:9099/biosdk-service

# The fully qualified Class Name of the BIO SDK API implemented for Finger modality 
# This class will be loaded in runtime, the containing jar should be available in classpath
mosip.biometric.sdk.provider.finger.classname=io.mosip.biosdk.client.impl.spec_1_0.Client_V_1_0
# The version of the BIO SDK API implemeted for Finger modality
mosip.biometric.sdk.provider.finger.version=0.9
mosip.biometric.sdk.provider.finger.format.url.mock-1.1=${mosip.biosdk.default.service.url}
# The default URL will be taken if no format specified in the extraction or the incoming extraction format is not configured. 
# If the below default configuration is not configured, the one of the configured url will be used as the default URL. 
# If no URL is configured, the default URL will be taken from the environment variable 'mosip_biosdk_service'.
mosip.biometric.sdk.provider.finger.format.url.default=${mosip.biosdk.default.service.url}

# The fully qualified Class Name of the BIO SDK API implemented for Iris modality 
# This class will be loaded in runtime, the containing jar should be available in classpath
mosip.biometric.sdk.provider.iris.classname=io.mosip.biosdk.client.impl.spec_1_0.Client_V_1_0
# The version of the BIO SDK API implemeted for Iris modality
mosip.biometric.sdk.provider.iris.version=0.9
mosip.biometric.sdk.provider.iris.format.url.mock-1.1=${mosip.biosdk.default.service.url}

# The fully qualified Class Name of the BIO SDK API implemented for Face modality 
# This class will be loaded in runtime, the containing jar should be available in classpath
mosip.biometric.sdk.provider.face.classname=io.mosip.biosdk.client.impl.spec_1_0.Client_V_1_0
# The version of the BIO SDK API implemeted for Face modality
mosip.biometric.sdk.provider.face.version=0.9
#mosip.biometric.sdk.provider.face.format.url.mock-1.1=http://13.201.83.133:9099/biosdk-service
mosip.biometric.sdk.provider.face.format.url.mock-1.1=${mosip.biosdk.default.service.url}
#------


# Credential issuance Event properties
id-repo-ida-event-type-namespace=mosip
id-repo-ida-event-type-name=ida
id-repo-ida-credential-type=auth
id-repo-ida-credential-recepiant=IDA

-----------
# Kernel token ID generator properties
mosip.kernel.tokenid.uin.salt=zHuDEAbmbxiUbUShgy6pwUhKh9DE0EZn9kQDKPPKbWscGajMwf
mosip.kernel.tokenid.partnercode.salt=yS8w5Wb6vhIKdf1msi4LYTJks7mqkbmITk2O63Iq8h0bkRlD0d

logging.level.io.mosip.idrepository.core.httpfilter.BaseIdRepoFilter=DEBUG


#-------------S3adapter-------------------
# s3 adapter config
object.store.s3.accesskey=admin
object.store.s3.secretkey={cipher}e419b23e688cc23991001afddbda206d42f7df5090c65f3566be7651c90128c1
object.store.s3.url=http://minio.default:9000
object.store.s3.region=
object.store.s3.readlimit=10000000

#----------------------------------Property to enable/disable anonymous profiling-------------------------#
#Anonymous profiling is used by reporting framework.
#If this property is disabled/commented/set to false, AnonyousProfile feature will be disabled.
mosip.idrepo.anonymous-profiling-enabled=true

#---------------------------------------AnonymousProfile Properties----------------------------------------#
#Path to identity mapping json file
mosip.identity.mapping-file=${mosip.kernel.xsdstorage-uri}/identity-mapping.json


#---------------------------------------VerCred properties-------------------------------------------------#
mosip.credential.service.vercred.context.url.map={"https://www.w3.org/ns/odrl.jsonld" : "odrl.jsonld", "https://www.w3.org/2018/credentials/v1" : "cred-v1.jsonld", "${mosip.api.internal.url}/.well-known/mosip-context.json" : "mosip-context.json"}
mosip.credential.service.vercred.context.uri=vccontext.jsonld
mosip.credential.service.vercred.id.url=${mosip.api.internal.url}/credentials/
mosip.credential.service.vercred.issuer.url=${mosip.api.internal.url}/.well-known/controller.json
mosip.credential.service.vercred.types=VerifiableCredential,MOSIPVerifiableCredential
mosip.credential.service.vercred.proof.purpose=assertionMethod
mosip.credential.service.vercred.proof.type=RsaSignature2018
mosip.credential.service.vercred.proof.verificationmethod=${mosip.api.internal.url}/.well-known/public-key.json

KEYMANAGER_VERCRED_SIGN=http://kernel-keymanager-service/v1/keymanager/jwsSign
credentialType.formatter.VERCRED=VerCredProvider
credentialType.formatter.PDFCARD=VerCredProvider

logging.level.org.hibernate.stat=DEBUG
spring.jpa.properties.hibernate.generate_statistics=true

#Properties added to run credential request generator 1.1.4.4 - temp
mosip.credential.request.job.timeintervel=10000

# Added Extra debug statement
logging.level.io.mosip.idrepository.identity.controller=DEBUG
mosip.idrepo.identityjson.file=identity-mapping.json

logging.level.org.springframework.cache=TRACE
#Cache expirytime
mosip.credential.service.policy-cache.exipry-time-millisec=120000
#Credential fetch identity type
mosip.credential.service.fetch-identity.type=bio

