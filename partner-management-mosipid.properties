## Follow properites have their values assigned via 'overrides' environment variables of config server docker.
## DO NOT define these in any of the property files.  They must be passed as env variables.  Refer to config-server
## helm chart:
## db.dbuser.password
## mosip.pms.client.secret
## keycloak.internal.url
## keycloak.admin.password
## mosip.api.public.url

#database.host=api-internal.released.mosip.net
#database.port=5432
#database.username=postgres

mosip.pmp.database.hostname=api-internal.released.mosip.net
mosip.pmp.database.port=5433
mosip.pmp.database.user=pmsuser
mosip.pmp.database.password=${db.dbuser.cre.password}

## Tomcat access logs
server.tomcat.accesslog.enabled=true
server.tomcat.accesslog.directory=/dev
server.tomcat.accesslog.prefix=stdout
server.tomcat.accesslog.buffered=false
server.tomcat.accesslog.suffix=
server.tomcat.accesslog.file-date-format=
server.tomcat.accesslog.pattern={"@timestamp":"%{yyyy-MM-dd'T'HH:mm:ss.SSS'Z'}t","level":"ACCESS","level_value":70000,"traceId":"%{X-B3-TraceId}i","statusCode":%s,"req.requestURI":"%U","bytesSent":%b,"timeTaken":%T,"appName":"${spring.application.name}","req.userAgent":"%{User-Agent}i","req.xForwardedFor":"%{X-Forwarded-For}i","req.referer":"%{Referer}i","req.method":"%m","req.remoteHost":"%a"}
server.tomcat.accesslog.className=io.mosip.kernel.core.logger.config.SleuthValve

## Websub (internal url)
websub.hub.url=https://api-internal.released.mosip.net/hub/
websub.publish.url=https://api-internal.released.mosip.net/hub/

mosip.kernel.notification.url=https://api-internal.released.mosip.net
mosip.kernel.authmanager.url=https://api-internal.released.mosip.net
mosip.kernel.masterdata.url=https://api-internal.released.mosip.net
mosip.kernel.keymanager.url=https://api-internal.released.mosip.net
mosip.kernel.auditmanager.url=https://api-internal.released.mosip.net
mosip.datashare.url=https://api-internal.released.mosip.net
mosipbox.public.url=https://api-internal.released.mosip.net
mosip.api.internal.url=https://api-internal.released.mosip.net
mosip.api.public.url=https://api-internal.released.mosip.net
keycloak.internal.url=https://iam.released.mosip.net
keycloak.external.url=https://iam.released.mosip.net
mosip.esignet.service.url=https://esignet-mosipid.es-qa.mosip.net

## CBEFF util
# Cbeff URL where the files will be stored in git, change it accordingly in case of change of storage location.
mosip.kernel.xsdstorage-uri=${spring.cloud.config.uri}/${spring.application.name}/${spring.profiles.active}/${spring.cloud.config.label}/
# Cbeff XSD file name in config server
mosip.kernel.xsdfile=mosip-cbeff.xsd

## iam adapter
mosip.auth.adapter.impl.basepackage=io.mosip.kernel.auth.defaultadapter
mosip.kernel.auth.adapter.ssl-bypass=true
mosip.kernel.auth.appid-realm-map={prereg:'mosip',ida:'mosip',registrationclient:'mosip',regproc:'mosip',partner:'mosip',resident:'mosip',admin:'mosip',crereq:'mosip',creser:'mosip',datsha:'mosip',idrepo:'mosip',hotlist:'mosip',digitalcard:'mosip',signup:'mosip'}
mosip.kernel.auth.appids.realm.map={prereg:'mosip',ida:'mosip',registrationclient:'mosip',regproc:'mosip',partner:'mosip',resident:'mosip',admin:'mosip',crereq:'mosip',creser:'mosip',datsha:'mosip',idrepo:'mosip',hotlist:'mosip',digitalcard:'mosip',signup:'mosip'}
auth.server.admin.issuer.uri=https://iam.released.mosip.net/auth/realms/
auth.server.admin.issuer.internal.uri=https://iam.released.mosip.net/auth/realms/
mosip.iam.adapter.issuerURL=https://iam.released.mosip.net/auth/realms/mosip

## Crypto
mosip.kernel.crypto.asymmetric-algorithm-name=RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING
mosip.kernel.crypto.symmetric-algorithm-name=AES/GCM/PKCS5Padding
mosip.kernel.keygenerator.asymmetric-algorithm-name=RSA
mosip.kernel.keygenerator.symmetric-algorithm-name=AES
mosip.kernel.keygenerator.asymmetric-key-length=2048
mosip.kernel.keygenerator.symmetric-key-length=256
mosip.kernel.data-key-splitter=#KEY_SPLITTER#
mosip.kernel.crypto.gcm-tag-length=128
mosip.kernel.crypto.hash-algorithm-name=PBKDF2WithHmacSHA512
mosip.kernel.crypto.hash-symmetric-key-length=256
mosip.kernel.crypto.hash-iteration=100000
mosip.kernel.crypto.sign-algorithm-name=RS256
mosip.kernel.keymanager-service-publickey-url=${mosip.kernel.keymanager.url}/v1/keymanager/publickey/{applicationId}
mosip.kernel.keymanager-service-decrypt-url=${mosip.kernel.keymanager.url}/v1/keymanager/decrypt
mosip.kernel.keymanager-service-auth-decrypt-url=${mosip.kernel.keymanager.url}/v1/keymanager/auth/decrypt
mosip.kernel.keymanager-service-sign-url=${mosip.kernel.keymanager.url}/v1/keymanager/sign
mosip.kernel.keymanager.cert.url=${mosip.kernel.keymanager.url}/v1/keymanager/getCertificate
mosip.kernel.keymanager-service-CsSign-url=${mosip.kernel.keymanager.url}/v1/keymanager/cssign
mosip.sign.applicationid=KERNEL
mosip.sign.refid=SIGN
mosip.kernel.cryptomanager.request_id=CRYPTOMANAGER.REQUEST
mosip.kernel.cryptomanager.request_version=v1.0
mosip.kernel.signature.signature-request-id=SIGNATURE.REQUEST
mosip.kernel.signature.signature-version-id=v1.0

mosip.mandatory-languages=eng
## Leave blank if no optional langauges
mosip.optional-languages=ara,fra
mosip.min-languages.count=2
mosip.max-languages.count=3

# These are default languages used for sending notifications
mosip.default.template-languages=eng,ara,fra
mosip.notification.timezone=GMT+05:30

# registration center type validation regex, used to restrict the special charecter
mosip.centertypecode.validate.regex=^[a-zA-Z0-9]([_-](?![_-])|[a-zA-Z0-9]){0,34}[a-zA-Z0-9]$

## Swagger
openapi.service.servers[0].url=${mosip.api.internal.url}${server.servlet.context-path:${server.servlet.path:}}
openapi.service.servers[0].description=For Swagger

mosip.auth.filter_disable=false


## Hibernate
javax.persistence.jdbc.driverClassName=org.postgresql.Driver
javax.persistence.jdbc.driver=org.postgresql.Driver
javax.persistence.jdbc.url=jdbc:postgresql://${mosip.pmp.database.hostname}:${mosip.pmp.database.port}/mosip_pms
javax.persistence.jdbc.user=${mosip.pmp.database.user}
javax.persistence.jdbc.username=${mosip.pmp.database.user}
javax.persistence.jdbc.password=${mosip.pmp.database.password}
javax.persistence.jdbc.schema = pms
javax.persistence.jdbc.uinHashTable=uin_hash_salt
javax.persistence.jdbc.uinEncryptTable=uin_encrypt_salt

hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect
hibernate.jdbc.lob.non_contextual_creation=true
hibernate.hbm2ddl.auto=none
hibernate.show_sql=true
hibernate.format_sql=true
hibernate.connection.charSet=utf8
hibernate.cache.use_second_level_cache=false
hibernate.cache.use_query_cache=false
hibernate.cache.use_structured_entries=false
hibernate.generate_statistics=false
spring.datasource.initialization-mode=never

## This property is used by kernel-authcodeflowproxy-api to check request is coming from allowed urls not.
auth.allowed.urls=https://pmp.released.mosip.net/

## Application ID of PMP. Used to upload other domain certs
application.id=PARTNER
application.name=partner

## To configure starting value or initial value of mispId.
## ex: if value = 3 ==> mispId starts from  100
## if value = 4 ==> mispId starts from 1000
mosip.kernel.mispid.length = 3
mosip.kernel.idgenerator.misp.license-key-length = 50
## To configure the partner types for which extractors are required. It should be "," separated.
pmp.bioextractors.required.partner.types = Credential_Partner,Online_Verification_Partner
mosip.pmp.misp.license.expiry.period.indays = 90
mosip.pmp.partner.policy.expiry.period.indays = 90
pmp.policy.expiry.period.indays = 180
pmp.policy.schema.url= https://schemas.mosip.io/v1/auth-policy

## To configure what are the allowed policy types.
## If we add any new policy type, corresponding schema also needs to be added.
## format for adding schema configuration for new policy type is as below
## pmp.policyTypeName.policy.schema(all are in lowercase)= schema url
pmp.allowed.policy.types=Auth,DataShare,CredentialIssuance,MISP
pmp.auth.policy.schema = ${mosip.kernel.xsdstorage-uri}auth-policy-schema.json
pmp.datashare.policy.schema=${mosip.kernel.xsdstorage-uri}data-share-policy-schema.json
pmp.credentialissuance.policy.schema=${mosip.kernel.xsdstorage-uri}data-share-policy-schema.json
pmp.misp.policy.schema = ${mosip.kernel.xsdstorage-uri}misp-policy-schema.json

pmp.misp.valid.email.address.regex=^[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$
pmp.partner.valid.email.address.regex=^[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$
pmp.partner.partnerId.max.length=36
pmp.partner.mobileNumbe.max.length=16

## Time difference between request creation and request processing
masterdata.registerdevice.timestamp.validate=+5

## Keymanager
mosip.kernel.sign-url=${mosip.kernel.keymanager.url}/v1/keymanager/jwtSign
## Kernel services
mosip.kernel.masterdata.audit-url=${mosip.kernel.auditmanager.url}/v1/auditmanager/audits

# ApplicationId for partner
mosip.pmp.auth.appId =partner
# Kernel auth client ID for partner management services
mosip.pmp.auth.clientId=mosip-pms-client
# Kernel auth secret key for partner management services
mosip.pmp.auth.secretKey= ${mosip.pms.client.secret}
# Key manager service API's to upload certificates
pms.cert.service.token.request.clientId=${mosip.pmp.auth.clientId}
pms.cert.service.token.request.issuerUrl=${mosip.kernel.authmanager.url}/v1/authmanager/authenticate/clientidsecretkey
pmp.ca.certificaticate.upload.rest.uri=${mosip.kernel.keymanager.url}/v1/keymanager/uploadCACertificate
pmp.partner.certificaticate.upload.rest.uri=${mosip.kernel.keymanager.url}/v1/keymanager/uploadPartnerCertificate
pmp.partner.certificaticate.get.rest.uri=${mosip.kernel.keymanager.url}/v1/keymanager/getPartnerCertificate/{partnerCertId}
pmp-keymanager.upload.other.domain.cert.rest.uri=${mosip.kernel.keymanager.url}/v1/keymanager/uploadOtherDomainCertificate

#Auth token generation
mosip.iam.adapter.clientid=${mosip.pmp.auth.clientId}
mosip.iam.adapter.clientsecret=${mosip.pmp.auth.secretKey}
mosip.iam.adapter.appid=${mosip.pmp.auth.appId}

# Used to get data share url to publish to websub
pmp.certificaticate.datashare.rest.uri=https://api-internal.released.mosip.net/v1/datashare/create
# Used for generating the datashare url
pms.certs.datashare.policyId=mpolicy-default-cert
pms.certs.datashare.subscriberId=mpartner-default-cert

## Keycloak
# These configurations are used to create user in keycloak and map to a role.
# Pre-Condition: All partner types should be created as roles in keycloak.

mosip.iam.realm.operations.base-url = ${keycloak.internal.url}/auth/admin/realms/{realmId}
mosip.iam.admin-url =${keycloak.internal.url}/auth/admin/
mosip.iam.admin-realm-id =admin
mosip.iam.roles-extn-url =realms/mosip/roles
mosip.iam.users-extn-url = realms/mosip/users
mosip.iam.role-user-mapping-url =/{userId}/role-mappings/realm
mosip.iam.open-id-url =${keycloak.internal.url}/auth/realms/{realmId}/protocol/openid-connect/
mosip.iam.master.realm-id=master
mosip.iam.default.realm-id=mosip
mosip.keycloak.admin.client.id=admin-cli
mosip.keycloak.admin.user.id=admin
mosip.keycloak.admin.secret.key=${keycloak.admin.password}

## Auth adapter
auth.server.validate.url=${mosip.kernel.authmanager.url}/v1/authmanager/authorize/admin/validateToken
auth.server.admin.validate.url=${mosip.kernel.authmanager.url}/v1/authmanager/authorize/admin/validateToken
auth.server.admin.allowed.audience=mosip-creser-client,mosip-datsha-client,mosip-ida-client,mosip-regproc-client,mosip-admin-client,mosip-reg-client,mosip-pms-client,mosip-resident-client,mosip-idrepo-client,mosip-deployment-client
auth.jwt.secret=authjwtsecret
auth.jwt.base=Mosip-Token

mosip.iam.adapter.issuerURL=${keycloak.internal.url}/auth/realms/mosip
mosip.authmanager.client-token-endpoint=${mosip.kernel.authmanager.url}/v1/authmanager/authenticate/clientidsecretkey
# in minutes
mosip.iam.adapter.validate-expiry-check-rate=15
# in minutes
mosip.iam.adapter.renewal-before-expiry-interval=15
#this should be false if you don't use this restTemplate true if you do
mosip.iam.adapter.self-token-renewal-enable=true
mosip.auth.filter_disable=false

#To populate required roles which should be allowed in UI.(Roles are nothing but partner types)
mosip.pms.ui.required.roles=AUTH_PARTNER,DEVICE_PROVIDER,CREDENTIAL_PARTNER,FTM_PROVIDER,MISP_PARTNER,POLICYMANAGER,PARTNER_ADMIN

# To configure misp partner type
mosip.pms.misp.partner.type=MISP_Partner

# Role for partner admin =
mosip.pms.partneradmin.role=PARTNER_ADMIN

## Security
mosip.security.csrf-enable:false
mosip.security.secure-cookie:false

partner.search.maximum.rows=10

## Allowed credential types which partner can map against to policy
pmp.allowed.credential.types=auth,qrcode,euin,reprint,vercred,opencrvs

## Allowed partner types who can map policies to credential types
policy.credential.type.mapping.allowed.partner.types=Credential_Partner,Online_Verification_Partner,Auth_Partner

## Allowed kyc attributes. Used to display in UI
policy.allowed.kyc.attributes = {"fullName": "Full Name","middleName": "Middle Name","lastName": "Last Name","dateOfBirth": "DateOfBirth","gender": "Gender","phone": "phone"}
## Used to display in UI
policy.auth.allowed.token.types=random,partner,policy

# IAM
mosip.iam.module.login_flow.name=authorization_code
mosip.iam.module.clientID=mosip-pms-client
mosip.iam.module.clientsecret=${mosip.pms.client.secret}
mosip.iam.module.redirecturi=${mosip.api.internal.url}/v1/partnermanager/login-redirect/
mosip.iam.module.login_flow.scope=email
mosip.iam.module.login_flow.response_type=code
mosip.iam.authorization_endpoint=${keycloak.external.url}/auth/realms/mosip/protocol/openid-connect/auth
mosip.iam.module.admin_realm_id=mosip
mosip.pms.filtervalue.max_columns =100
mosip.iam.token_endpoint=${keycloak.internal.url}/auth/realms/mosip/protocol/openid-connect/token
mosip.iam.certs_endpoint=${keycloak.external.url}/auth/realms/mosip/protocol/openid-connect/certs

## Unused properties. TODO: delete them once they are removed from code
pmp.policy.allowed.authtokens.types=random,partner,policy
mosip.kernel.device.search-url=${mosip.kernel.masterdata.url}/v1/masterdata/devices/search
token.request.appid=admin
token.request.password=mosip
token.request.username=110005
token.request.version=string
token.request.id=v1
token.request.issuerUrl=${mosip.kernel.authmanager.url}/v1/authmanager/authenticate/clientidsecretkey
token.request.clientId=admin
PASSWORDBASEDTOKENAPI=${mosip.kernel.authmanager.url}/v1/authmanager/authenticate/useridPwd
application.env.local=false

# Notifications
emailResourse.url=${mosip.kernel.notification.url}/v1/notifier/email/send
resource.template.url=${mosip.kernel.masterdata.url}/v1/masterdata/templates/{langcode}/{templatetypecode}
notifications.sent.before.days = 3
partner.registration.sub-template = partner-reg-sub-template
partner.reg.content-template=partner-reg-content-template
partner.status.sub-template=partner-status-sub-template
partner.status.content-template=partner-status-content-template
partner.apikey.status.sub-template=partner-apikey-status-sub-template
apikey.status.content-template=apikey-status-content-template
pms.notifications-schedule.init-delay = 24
pms.notifications-schedule.fixed-rate=24

partner.register.as.user.in.iam.enable=false

## Roles
mosip.role.pms.postpoliciesgroupnew=PARTNER_ADMIN,POLICYMANAGER
mosip.role.pms.putpoliciesgrouppolicygroupid=PARTNER_ADMIN,POLICYMANAGER
mosip.role.pms.postpolicies=PARTNER_ADMIN,POLICYMANAGER
mosip.role.pms.postpoliciespolicyidgrouppublish=PARTNER_ADMIN,POLICYMANAGER
mosip.role.pms.putpoliciespolicyid=PARTNER_ADMIN,POLICYMANAGER
mosip.role.pms.patchpoliciespolicyidgrouppolicygroupid=PARTNER_ADMIN,POLICYMANAGER
mosip.role.pms.getpolicies=PARTNER_ADMIN,POLICYMANAGER
mosip.role.pms.getpoliciespolicyid=PARTNER_ADMIN,POLICYMANAGER
mosip.role.pms.getpoliciesapikey=PARTNER_ADMIN,POLICYMANAGER
mosip.role.pms.getpoliciespolicyidpartnerpartnerid=PARTNER_ADMIN,POLICYMANAGER
mosip.role.pms.getpoliciesgrouppolicygroupid=PARTNER_ADMIN,POLICYMANAGER
mosip.role.pms.getpoliciesgroupall=PARTNER_ADMIN,POLICYMANAGER
mosip.role.pms.postpoliciesgroupsearch=PARTNER_ADMIN,AUTH_PARTNER,CREDENTIAL_PARTNER,PARTNER_ADMIN,POLICYMANAGER
mosip.role.pms.postpoliciessearch=PARTNER_ADMIN,POLICYMANAGER
mosip.role.pms.getpoliciesconfigkey=PARTNER_ADMIN,POLICYMANAGER
mosip.role.pms.postpoliciesgroupfiltervalues=PARTNER_ADMIN,PARTNER,AUTH_PARTNER,CREDENTIAL_PARTNER,POLICYMANAGER,PARTNER
mosip.role.pms.postpoliciesfiltervalues=PARTNER_ADMIN,PARTNER,AUTH_PARTNER,CREDENTIAL_PARTNER,POLICYMANAGER,PARTNER
mosip.role.pms.getactivegroupgroupname=AUTH_PARTNER,CREDENTIAL_PARTNER,PARTNER_ADMIN,ONLINE_VERIFICATION_PARTNER,ABIS_PARTNER,MANUAL_ADJUDICATION,POLICYMANAGER
mosip.role.pms.postdevicedetail=PARTNER_ADMIN,DEVICE_PROVIDER,FTM_PROVIDER
mosip.role.pms.putdevicedetail=PARTNER_ADMIN,DEVICE_PROVIDER,FTM_PROVIDER
mosip.role.pms.patchdevicedetail=PARTNER_ADMIN
mosip.role.pms.postdevicedetailsearch=PARTNER_ADMIN,DEVICE_PROVIDER,FTM_PROVIDER
mosip.role.pms.postdevicedetaildevicetypesearch=PARTNER_ADMIN,DEVICE_PROVIDER,FTM_PROVIDER
mosip.role.pms.postdevicedetailfiltervalues=PARTNER_ADMIN,DEVICE_PROVIDER,FTM_PROVIDER
mosip.role.pms.postdevicedetaildevicetypefiltervalues=PARTNER_ADMIN,DEVICE_PROVIDER,FTM_PROVIDER
mosip.role.pms.postdevicedetaildevicesubtypefiltervalues=PARTNER_ADMIN,DEVICE_PROVIDER,FTM_PROVIDER
mosip.role.pms.postftpchipdetail=PARTNER_ADMIN,FTM_PROVIDER
mosip.role.pms.putftpchipdetail=PARTNER_ADMIN,FTM_PROVIDER
mosip.role.pms.patchftpchipdetail=PARTNER_ADMIN
mosip.role.pms.postftpchipdetailuploadcertificate=PARTNER_ADMIN,FTM_PROVIDER
mosip.role.pms.getftpchipdetailgetpartnercertificate=PARTNER_ADMIN,FTM_PROVIDER
mosip.role.pms.postftpchipdetailsearch=PARTNER_ADMIN,FTM_PROVIDER
mosip.role.pms.postsecurebiometricinterface=PARTNER_ADMIN,DEVICE_PROVIDER,FTM_PROVIDER
mosip.role.pms.putsecurebiometricinterface=PARTNER_ADMIN,DEVICE_PROVIDER,FTM_PROVIDER
mosip.role.pms.patchsecurebiometricinterface=PARTNER_ADMIN
mosip.role.pms.postsecurebiometricinterfacesearch=PARTNER_ADMIN,DEVICE_PROVIDER,FTM_PROVIDER
mosip.role.pms.putsecurebiometricinterfacedevicedetailsmap=PARTNER_ADMIN,DEVICE_PROVIDER,FTM_PROVIDER
mosip.role.pms.putsecurebiometricinterfacedevicedetailsmapremove=PARTNER_ADMIN,DEVICE_PROVIDER,FTM_PROVIDER
mosip.role.pms.postsecurebiometricinterfacedevicedetailsmapsearch=PARTNER_ADMIN,DEVICE_PROVIDER,FTM_PROVIDER
mosip.role.pms.postsecurebiometricinterfacefiltervalues=PARTNER_ADMIN,DEVICE_PROVIDER,FTM_PROVIDER
mosip.role.pms.postpartnersbioextractors=PARTNER,CREDENTIAL_PARTNER,PARTNER_ADMIN,CREDENTIAL_ISSUANCE,CREATE_SHARE,ONLINE_VERIFICATION_PARTNER
mosip.role.pms.getpartnersbioextractors=PARTNER,CREDENTIAL_PARTNER,PARTNER_ADMIN,CREDENTIAL_ISSUANCE,CREATE_SHARE,ONLINE_VERIFICATION_PARTNER
mosip.role.pms.postpartnerscredentialtypepolicies=PARTNER,CREDENTIAL_PARTNER,PARTNER_ADMIN,CREDENTIAL_ISSUANCE,CREATE_SHARE,ONLINE_VERIFICATION_PARTNER
mosip.role.pms.getpartnerscredentialtypepolicies=PARTNER,CREDENTIAL_PARTNER,PARTNER_ADMIN,CREDENTIAL_ISSUANCE,CREATE_SHARE,ONLINE_VERIFICATION_PARTNER
mosip.role.pms.postpartnerscontactadd=PARTNER,AUTH_PARTNER,CREDENTIAL_PARTNER,PARTNER_ADMIN,ONLINE_VERIFICATION_PARTNER,DEVICE_PROVIDER,FTM_PROVIDER,ABIS_PARTNER,MANUAL_ADJUDICATION,MISP_PARTNER
mosip.role.pms.putpartners=PARTNER,AUTH_PARTNER,CREDENTIAL_PARTNER,PARTNER_ADMIN,ONLINE_VERIFICATION_PARTNER,DEVICE_PROVIDER,FTM_PROVIDER,ABIS_PARTNER,MANUAL_ADJUDICATION,MISP_PARTNER
mosip.role.pms.putpartnersnew=PARTNER,AUTH_PARTNER,CREDENTIAL_PARTNER,PARTNER_ADMIN,ONLINE_VERIFICATION_PARTNER,DEVICE_PROVIDER,FTM_PROVIDER,ABIS_PARTNER,MANUAL_ADJUDICATION,MISP_PARTNER
mosip.role.pms.getpartnerspartnerid=PARTNER,AUTH_PARTNER,CREDENTIAL_PARTNER,RESIDENT,PARTNER_ADMIN,ONLINE_VERIFICATION_PARTNER,DEVICE_PROVIDER,FTM_PROVIDER,ABIS_PARTNER,SDK_PARTNER,MANUAL_ADJUDICATION,MISP_PARTNER
mosip.role.pms.getpartnersapikeyrequest=PARTNER,AUTH_PARTNER,ABIS_PARTNER,CREDENTIAL_PARTNER,PARTNER_ADMIN,ONLINE_VERIFICATION_PARTNER
mosip.role.pms.postpartnerscacertificateupload=PARTNERMANAGER,PARTNER_ADMIN
mosip.role.pms.postpartnerscertificateupload=PARTNER,PMS_USER,AUTH_PARTNER,ABIS_PARTNER,SDK_PARTNER,DEVICE_PROVIDER,FTM_PROVIDER,CREDENTIAL_PARTNER,CREDENTIAL_ISSUANCE,ID_AUTHENTICATION,PARTNER_ADMIN,ONLINE_VERIFICATION_PARTNER
mosip.role.pms.getpartnerscertificate=PARTNER,PMS_USER,AUTH_PARTNER,ABIS_PARTNER,SDK_PARTNER,DEVICE_PROVIDER,FTM_PROVIDER,CREDENTIAL_PARTNER,CREDENTIAL_ISSUANCE,CREATE_SHARE,ID_AUTHENTICATION,PARTNER_ADMIN,ONLINE_VERIFICATION_PARTNER
mosip.role.pms.postpartnerssearch=PARTNER,PMS_USER,AUTH_PARTNER,ABIS_PARTNER,SDK_PARTNER,DEVICE_PROVIDER,FTM_PROVIDER,PARTNER_ADMIN,CREDENTIAL_PARTNER,ONLINE_VERIFICATION_PARTNER
mosip.role.pms.postpartnerspartnertypesearch=PARTNER,PMS_USER,AUTH_PARTNER,DEVICE_PROVIDER,FTM_PROVIDER,PARTNER_ADMIN,CREDENTIAL_PARTNER,ONLINE_VERIFICATION_PARTNER
mosip.role.pms.postpartnersfiltervalues=PARTNER,PMS_USER,AUTH_PARTNER,DEVICE_PROVIDER,FTM_PROVIDER,CREDENTIAL_PARTNER,PARTNER_ADMIN,ONLINE_VERIFICATION_PARTNER
mosip.role.pms.postpartnersapikeyrequestfiltervalues=PARTNER,PARTNER_ADMIN,AUTH_PARTNER,CREDENTIAL_PARTNER,ONLINE_VERIFICATION_PARTNER
mosip.role.pms.postpartnersapikeyrequestsearch=PARTNER,PMS_USER,AUTH_PARTNER,ABIS_PARTNER,CREDENTIAL_PARTNER,PARTNER_ADMIN,ONLINE_VERIFICATION_PARTNER
mosip.role.pms.postpartnersapikeysearch=PARTNER,PMS_USER,AUTH_PARTNER,ABIS_PARTNER,CREDENTIAL_PARTNER,PARTNER_ADMIN,ONLINE_VERIFICATION_PARTNER
mosip.role.pms.putpartnerspolicygroup=PARTNER,PMS_USER,AUTH_PARTNER,CREDENTIAL_PARTNER,PARTNER_ADMIN,ONLINE_VERIFICATION_PARTNER
mosip.role.pms.postpartnerspolicymap=AUTH_PARTNER,ABIS_PARTNER,CREDENTIAL_PARTNER,CREDENTIAL_ISSUANCE,ONLINE_VERIFICATION_PARTNER,PARTNER_ADMIN
mosip.role.pms.patchpartnersgenerateapikey=AUTH_PARTNER,ABIS_PARTNER,CREDENTIAL_PARTNER,CREDENTIAL_ISSUANCE,ONLINE_VERIFICATION_PARTNER
mosip.role.pms.putpartnersapikeypolicies=PARTNERMANAGER,PARTNER_ADMIN
mosip.role.pms.patchpartners=PARTNERMANAGER,PARTNER_ADMIN
mosip.role.pms.getpartners=PARTNERMANAGER,PARTNER_ADMIN,partnermanager,ID_AUTHENTICATION,REGISTRATION_PROCESSOR,RESIDENT,CREDENTIAL_ISSUANCE,ID_REPOSITORY
mosip.role.pms.getpartnersnew=PARTNERMANAGER,PARTNER_ADMIN,partnermanager,ID_AUTHENTICATION,REGISTRATION_PROCESSOR,RESIDENT,CREDENTIAL_ISSUANCE,ID_REPOSITORY
mosip.role.pms.getpartnersapikey=PARTNERMANAGER,PARTNER_ADMIN
mosip.role.pms.putpartnerspolicymapping=PARTNERMANAGER,PARTNER_ADMIN
mosip.role.pms.patchpartnerspolicyapikeystatus=PARTNERMANAGER,PARTNER_ADMIN,AUTH_PARTNER,CREDENTIAL_PARTNER,CREDENTIAL_ISSUANCE,ONLINE_VERIFICATION_PARTNER
mosip.role.pms.postmisplicense=MISP_PARTNER,MISP,PARTNERMANAGER,PARTNER_ADMIN
mosip.role.pms.putmisplicense=MISP_PARTNER,MISP,PARTNERMANAGER,PARTNER_ADMIN
mosip.role.pms.getmisplicense=MISP_PARTNER,MISP,PARTNERMANAGER,PARTNER_ADMIN
mosip.role.pms.getmisplicensekey=PARTNERMANAGER,PARTNER_ADMIN
mosip.role.pms.postmispfiltervalues=MISP_PARTNER,MISP,PARTNERMANAGER,PARTNER_ADMIN
mosip.role.pms.postmispsearch=MISP_PARTNER,MISP,PARTNERMANAGER,PARTNER_ADMIN

# query param usd to refer url to redirect after logout 
mosip.iam.post-logout-uri-param-key=post_logout_redirect_uri 
# end session endpoint in OIDC 
mosip.iam.end-session-endpoint-path=/protocol/openid-connect/logout 
# Esignet claims mapping file url 
mosip.pms.esignet.claims-mapping-file-url=${spring_config_url_env}/*/${active_profile_env}/${spring_config_label_env}/identity-mapping.json
# Esignet amr-acr mapping file url 
mosip.pms.esignet.amr-acr-mapping-file-url=${spring_config_url_env}/*/${active_profile_env}/${spring_config_label_env}/amr-acr-mapping.json
## Esignet Service apis for create and update 
mosip.pms.esignet.oidc-client-create-url=${mosip.esignet.service.url}/v1/esignet/client-mgmt/oidc-client
mosip.pms.esignet.oidc-client-update-url=${mosip.esignet.service.url}/v1/esignet/client-mgmt/oidc-client

#Esignet OAuth Client apis for create and update 
mosip.pms.esignet.oauth-client-create-url=${mosip.esignet.service.url}/v1/esignet/client-mgmt/oauth-client
mosip.pms.esignet.oauth-client-update-url=${mosip.esignet.service.url}/v1/esignet/client-mgmt/oauth-client

## IDP Service api to fetch OIDC Client configuration 
mosip.pms.esignet.config-url=${mosip.esignet.service.url}/v1/esignet/oidc/.well-known/openid-configuration

logging.level.org.springframework.web.client.RestTemplate=DEBUG
